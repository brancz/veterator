.clearfix.panel
  .row
    .medium-6.columns
      %h1.text-center.show-for-small-only
        = @sensor.name
      %h1.show-for-medium-up
        = @sensor.name
    .medium-6.columns
      = link_to ' Delete', sensor_path(@sensor), method: :delete, :data => { :confirm => 'Are you sure?' }, class: 'button fi-x right show-for-medium-up alert margin-left-20'
      = link_to ' Edit', edit_sensor_path(@sensor), class: 'button fi-pencil right show-for-medium-up'
      = link_to ' Edit', edit_sensor_path(@sensor), class: 'button fi-pencil show-for-small-only'
      = link_to ' Delete', sensor_path(@sensor), method: :delete, :data => { :confirm => 'Are you sure?' }, class: 'button fi-x show-for-small-only alert'
= render 'layouts/flash'
.row
  = form_tag sensor_records_path(@sensor), :id => 'date_form', :method => :get do
    .row
      #from_box.medium-4.columns
        From
        = select_date @from, prefix: :from
      #to_box.medium-4.columns
        To
        = select_date @to, prefix: :to
      #submit_box.medium-4.columns
        = button_tag type: 'submit',id: 'date_submit', class: 'button small low-button' do
          %i.fi-filter
          Filter
  #graph.aGraph
  :javascript
    function plot(uri, selector) {
      var margin = {top: 10, right: 10, bottom: 100, left: 40},
          margin2 = {top: 430, right: 10, bottom: 20, left: 40},
          width = 960 - margin.left - margin.right,
          height = 500 - margin.top - margin.bottom,
          height2 = 500 - margin2.top - margin2.bottom;
      
      var parseDate = d3.time.format.iso.parse;
      
      var x = d3.time.scale().range([0, width]),
          x2 = d3.time.scale().range([0, width]),
          y = d3.scale.linear().range([height, 0]),
          y2 = d3.scale.linear().range([height2, 0]);
      
      var xAxis = d3.svg.axis().scale(x).orient("bottom"),
          xAxis2 = d3.svg.axis().scale(x2).orient("bottom"),
          yAxis = d3.svg.axis().scale(y).orient("left");
      
      var brush = d3.svg.brush()
          .x(x2)
          .on("brush", brushed);
      
      var area = d3.svg.area()
          .interpolate("monotone")
          .x(function(d) { return x(d.created_at); })
          .y0(height)
          .y1(function(d) { return y(d.value); });
      
      var area2 = d3.svg.area()
          .interpolate("monotone")
          .x(function(d) { return x2(d.created_at); })
          .y0(height2)
          .y1(function(d) { return y2(d.value); });
      
      var svg = d3.select(selector).append("svg")
          .attr("width", width + margin.left + margin.right)
          .attr("height", height + margin.top + margin.bottom);
      
      svg.append("defs").append("clipPath")
          .attr("id", "clip")
        .append("rect")
          .attr("width", width)
          .attr("height", height);
      
      var focus = svg.append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
      
      var context = svg.append("g")
          .attr("transform", "translate(" + margin2.left + "," + margin2.top + ")");
      
      d3.json(uri, function(error, data) {
      
        data.forEach(function(d) {
          d.created_at = parseDate(d.created_at);
          d.value = +d.value;
        });
      
        x.domain(d3.extent(data.map(function(d) { return d.created_at; })));
        y.domain([0, d3.max(data.map(function(d) { return d.value; }))]);
        x2.domain(x.domain());
        y2.domain(y.domain());
      
        focus.append("path")
            .datum(data)
            .attr("clip-path", "url(#clip)")
            .attr("d", area);
      
        focus.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height + ")")
            .call(xAxis);
      
        focus.append("g")
            .attr("class", "y axis")
            .call(yAxis);
      
        context.append("path")
            .datum(data)
            .attr("d", area2);
      
        context.append("g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + height2 + ")")
            .call(xAxis2);
      
        context.append("g")
            .attr("class", "x brush")
            .call(brush)
          .selectAll("rect")
            .attr("y", -6)
            .attr("height", height2 + 7);
      });
      
      function brushed() {
        x.domain(brush.empty() ? x2.domain() : brush.extent());
        focus.select("path").attr("d", area);
        focus.select(".x.axis").call(xAxis);
      }
    }

    plot(
      "#{sensor_records_json_with_params_path(@sensor)}",
      "div#graph"
    );
  %dl.accordion{"data-accordion" => ""}
    %dd
      = link_to 'Data table', '#data-table'
      #data-table.content
        %table.full-width
          %thead
            %tr
              %th Value
              %th Time
              %th
          %tbody
            - @records.each do |record|
              %tr
                %td= record.value
                %td= record.created_at
                %td= link_to 'Destroy', sensor_record_path(record.sensor, record), method: :delete, data: { confirm: 'Are you sure?' }
